import os, requests
import logging
import random
import asyncio
import string
import pytz
from datetime import timedelta
from datetime import datetime as dt
from Script import script
from pyrogram import Client, filters, enums
from pyrogram.errors import ChatAdminRequired, FloodWait
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from database.ia_filterdb import Media, get_file_details, get_bad_files, unpack_new_file_id
from database.users_chats_db import db
from info import UPI_PAY_LOGS, ADMINS, THREE_VERIFY_GAP, LOG_CHANNEL, USERNAME, VERIFY_IMG, IS_VERIFY, FILE_CAPTION, AUTH_CHANNEL, SHORTENER_WEBSITE, SHORTENER_API, SHORTENER_WEBSITE2, SHORTENER_API2, LOG_API_CHANNEL, TWO_VERIFY_GAP, QR_CODE, DELETE_TIME
from utils import get_settings,get_seconds, save_group_settings, is_req_subscribed, get_size, get_shortlink, is_check_admin, get_status, temp, get_readable_time
import re
import base64
from info import *
import traceback
logger = logging.getLogger(__name__)

@Client.on_message(filters.command("fsub"))
async def force_subscribe(client, message):
    m = await message.reply_text("Wait im checking...")
    if not message.chat.type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await m.edit("This command is only for groups!")
    if not await is_check_admin(client, message.chat.id, message.from_user.id):
        return await m.edit("Only group admins can use this command!")
    try: 
        toFsub = message.command[1]
    except IndexError:
        return await m.edit("Usage: /fsub CHAT_ID")
    if not toFsub.startswith("-100"):
        toFsub = '-100'+toFsub
    if not toFsub[1:].isdigit() or len(toFsub) != 14:
        return await m.edit("CHAT_ID isn't valid!")
    toFsub = int(toFsub)
    if toFsub == message.chat.id:
        return await m.edit("It seems like you're attempting to enable force subscription for this chat ID. Please use a different chat ID !")
    if not await is_check_admin(client, toFsub, client.me.id):
        return await m.edit("I need to be an admin in the given chat to perform this action!\nMake me admin in your Target chat and try again.")
    try:
        await db.setFsub(grpID=message.chat.id, fsubID=toFsub)
        return await m.edit(f"Successfully added force subscribe to {toFsub} in {message.chat.title}")
    except Exception as e:
        logger.exception(e)
        return await m.edit(f"Something went wrong ! Try again later or report in Support Group @bisal_files_talk")

@Client.on_message(filters.command("del_fsub"))
async def del_force_subscribe(client, message):
    m = await message.reply_text("Wait im checking...")
    if not message.chat.type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await m.edit("This command is only for groups!")
    if not await is_check_admin(client, message.chat.id, message.from_user.id):
        return await m.edit("Only group admins can use this command!")
    ifDeleted =await db.delFsub(message.chat.id)
    if ifDeleted:
        return await m.edit(f"Successfully removed force subscribe for - {message.chat.title}\nTo add again use <code>/fsub YOUR_FSUB_CHAT_ID</code>")
    else:
        return await m.edit(f"Force subscribe not found in {message.chat.title}")

@Client.on_message(filters.command("show_fsub"))
async def show_fsub(client, message):
    m = await message.reply_text("Wait im checking...")
    if not message.chat.type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await m.edit("This command is only for groups!")
    # check if commad is given by admin or not
    if not await is_check_admin(client, message.chat.id, message.from_user.id):
        return await m.edit("Only group admins can use this command!")
    fsub = await db.getFsub(message.chat.id)
    if fsub:
        #now gen a invite link
        invite_link = await client.export_chat_invite_link(fsub)
        await m.edit(f"Force subscribe is set to {fsub}\n<a href={invite_link}>Channel Link Link</a>" ,disable_web_page_preview=True)
    else:
        await m.edit(f"Force subscribe is not set in {message.chat.title}")
        

@Client.on_message(filters.command("bought") & filters.private)
async def bought(client, message):
    msg = await message.reply('Wait im checking...')
    replyed = message.reply_to_message
    if not replyed:
        await msg.edit("<b>Please reply with the screenshot of your payment for the premium purchase to proceed.\n\nFor example, first upload your screenshot, then reply to it using the '/bought' command</b>")
    if replyed and replyed.photo:
        await client.send_photo(
            photo=replyed.photo.file_id,
            chat_id=UPI_PAY_LOGS,
            caption=f'<b>User - {message.from_user.mention}\nUser id - <code>{message.from_user.id}</code>\nusername - <code>{message.from_user.username}</code>\nUser Name - <code>{message.from_user.first_name}</code></b>',
            reply_markup=InlineKeyboardMarkup(
                [
                    
                    [
                        InlineKeyboardButton(
                            "Close", callback_data="close_data"
                        )
                    ]
                    
                ]
            )
        )
        await msg.edit_text('<b>Your screenshot has been sent to Admins</b>')

@Client.on_message(filters.command("premium") & filters.user(ADMINS))
async def add_premium(client, message):
    try:
        _, user_id, time, *custom_message = message.text.split(" ", 3)
        custom_message = "**T ú·¥Ä…¥·¥ã  è·¥è·¥ú “ì·¥è Ä ·¥ò·¥ú Ä·¥Ñ ú·¥Äs…™…¥…¢ ·¥õ ú·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ò·¥Ä·¥Ñ·¥ã·¥Ä…¢·¥á. N·¥è·¥°,  ü·¥á·¥†·¥á Ä·¥Ä…¢·¥á …™·¥õs “ì·¥ú ü ü ·¥ò·¥è·¥õ·¥á…¥·¥õ…™·¥Ä ü**" if not custom_message else " ".join(custom_message)
        time_zone = dt.now(pytz.timezone("Asia/Kolkata"))
        current_time = time_zone.strftime("%d-%m-%Y : %I:%M:%S %p")
        user = await client.get_users(user_id)
        seconds = await get_seconds(time)
        if seconds > 0:
            expiry_time = dt.now() + timedelta(seconds=seconds)
            user_data = {"id": user.id, "expiry_time": expiry_time}
            await db.update_user(user_data)
            data = await db.get_user(user.id)
            expiry = data.get("expiry_time")
            expiry_str_in_ist = expiry.astimezone(pytz.timezone("Asia/Kolkata")).strftime("%d-%m-%Y  :  %I:%M:%S %p")
            await message.reply_text(f"<b><u>Premium Access Added To The User</u>\n\nüë§ User: {user.mention}\n\nü™™ User id: <code>{user_id}</code>\n\n‚è∞ Premium Access: {time}\n\nüé© Joining : {current_time}\n\n‚åõÔ∏è Expiry: {expiry_str_in_ist}.\n\n<code>{custom_message}</code></b>", disable_web_page_preview=True)
            await client.send_message(chat_id=user_id, text=f"<b> ú…™…™ {user.mention},\n\n<u>·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ</u> üòÄ\n\n·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ñ·¥Ñ·¥áss - {time}\n\n‚è∞ ·¥ä·¥è…™…¥…™…¥…¢ - {current_time}\n\n‚åõÔ∏è ·¥áx·¥ò…™ Ä·¥á …™…¥ - {expiry_str_in_ist}\n\n<code>{custom_message}</code></b>", disable_web_page_preview=True)
            await client.send_message(LOG_CHANNEL, text=f"#Added_Premium\n\nüë§ User - {user.mention}\n\nü™™ User Id - <code>{user_id}</code>\n\n‚è∞ Premium Access - {time}\n\nüé© Joining - {current_time}\n\n‚åõÔ∏è Expiry - {expiry_str_in_ist}\n\n<code>{custom_message}</code>", disable_web_page_preview=True)
        else:
            await message.reply_text("<b>‚ö†Ô∏è Invalid Format, Use This Format - <code>/add_premium 1030335104 1day</code>\n\n<u>Time Format -</u>\n\n<code>1 day for day\n1 hour for hour\n1 min for minutes\n1 month for month\n1 year for year</code>\n\nChange As Your Wish Like 2, 3, 4, 5 etc....</b>")
    except ValueError:
        await message.reply_text("<b>‚ö†Ô∏è Invalid Format, Use This Format - <code>/add_premium 1030335104 1day</code>\n\n<u>Time Format -</u>\n\n<code>1 day for day\n1 hour for hour\n1 min for minutes\n1 month for month\n1 year for year</code>\n\nChange As Your Wish Like 2, 3, 4, 5 etc....</b>")
    except Exception as e:
        traceback.print_exc()
        await message.reply_text(f"error - {e}")

@Client.on_message(filters.command("m_grp") & filters.user(ADMINS))
async def m_grp(client, message):
    msg = await message.reply("wait i'm checking..")
    try:
        link =  message.command[1]
        await msg.edit('checking ypur link..')
        url_pattern = r'^https?://(?:www\.)?\S+$'
        if re.match(url_pattern, link):
            await msg.edit('hmm..link is valid..üòö')
            await db.get_set_mgrp(link)
            await msg.edit('link is saved in my db..üòö')
            await asyncio.sleep(5)
            await msg.delete()
            await message.delete()
    except IndexError:
        await msg.edit('Send me your grp link with the command')
        await msg.delete()
        await message.delete()
        
@Client.on_message(filters.command("start") & filters.incoming)
async def start(client:Client, message): 
    m = message
    user_id = m.from_user.id
    if len(m.command) == 2 and m.command[1].startswith('notcopy'):
        _, userid, verify_id, file_id = m.command[1].split("_", 3)
        user_id = int(userid)
        grp_id = temp.CHAT.get(user_id, 0)
        settings = await get_settings(grp_id)         
        verify_id_info = await db.get_verify_id_info(user_id, verify_id)
        if not verify_id_info or verify_id_info["verified"]:
            await message.reply("<b> ü…™…¥·¥ã ·¥áx·¥ò…™ Ä·¥á·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥...</b>")
            return  
        ist_timezone = pytz.timezone('Asia/Kolkata')
        if await db.user_verified(user_id):
            key = "third_time_verified"
        else:
            key = "second_time_verified" if await db.is_user_verified(user_id) else "last_verified"
        current_time = dt.now(tz=ist_timezone)
        result = await db.update_notcopy_user(user_id, {key:current_time})
        await db.update_verify_id_info(user_id, verify_id, {"verified":True})
        if key == "third_time_verified": 
            num = 3 
        else: 
            num =  2 if key == "second_time_verified" else 1 
        if key == "third_time_verified": 
            msg = script.THIRDT_VERIFY_COMPLETE_TEXT
        else:
            msg = script.SECOND_VERIFY_COMPLETE_TEXT if key == "second_time_verified" else script.VERIFY_COMPLETE_TEXT
        await client.send_message(settings['log'], script.VERIFIED_LOG_TEXT.format(m.from_user.mention, user_id, dt.now(pytz.timezone('Asia/Kolkata')).strftime('%d %B %Y'), num))
        btn = [[
            InlineKeyboardButton("‚ÄºÔ∏è ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è …¢·¥á·¥õ Íú∞…™ ü·¥á ‚ÄºÔ∏è", url=f"https://telegram.me/{temp.U_NAME}?start=file_{grp_id}_{file_id}"),
        ]]
        reply_markup=InlineKeyboardMarkup(btn)
        await m.reply_photo(
            photo=(VERIFY_IMG),
            caption=msg.format(message.from_user.mention, get_readable_time(TWO_VERIFY_GAP)),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return 
    if message.chat.type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        status = get_status()
        aks=await message.reply_text(f"<b>üî•  è·¥ás {status},\n ú·¥è·¥° ·¥Ñ·¥Ä…¥ …™  ú·¥á ü·¥ò  è·¥è·¥ú??</b>")
        await asyncio.sleep(600)
        await aks.delete()
        await m.delete()
        if (str(message.chat.id)).startswith("-100") and not await db.get_chat(message.chat.id):
            total=await client.get_chat_members_count(message.chat.id)
            group_link = await message.chat.export_invite_link()
            user = message.from_user.mention if message.from_user else "Dear" 
            await client.send_message(LOG_CHANNEL, script.NEW_GROUP_TXT.format(temp.B_LINK, message.chat.title, message.chat.id, message.chat.username, group_link, total, user))       
            await db.add_chat(message.chat.id, message.chat.title)
        return 
    if not await db.is_user_exist(message.from_user.id):
        await db.add_user(message.from_user.id, message.from_user.first_name)
        await client.send_message(LOG_CHANNEL, script.NEW_USER_TXT.format(temp.B_LINK, message.from_user.id, message.from_user.mention))
        try: 
            refData = message.command[1]
            if refData and refData.split("-", 1)[0] == "SbBotz":
                Fullref = refData.split("-", 1)
                refUserId = int(Fullref[1])
                await db.update_point(refUserId)
                newPoint = await db.get_point(refUserId)
                if AUTH_CHANNEL and await is_req_subscribed(client, message):
                        buttons = [[
                            InlineKeyboardButton('‚ûï ùóîùó±ùó± ùóßùóµùó≤ ùóïùóºùòÅ ùóßùóº ùó¨ùóºùòÇùóø ùóöùóøùóºùòÇùóΩ! ‚ûï', url=f'http://t.me/{temp.U_NAME}?startgroup=start')
                            ],[
                            InlineKeyboardButton('‚öúÔ∏è ùó†ùóºùòÉùó∂ùó≤ ùóöùóøùóºùòÇùóΩ ‚öúÔ∏è', url='https://t.me/VenomStoneMoviesGroup')
                            ],
                            [
                            InlineKeyboardButton('üîç ùóïùóºùòÅùòÄ', url='https://t.me/VenomStoneBots'),
            InlineKeyboardButton('ùó†ùóºùó±ùòÄ üîé', url='https://t.me/VenomStoneMods')
                            ],
                            [
                            InlineKeyboardButton('üëë ùó©ùó≤ùóªùóºùó∫ ùó¶ùòÅùóºùóªùó≤ ùó°ùó≤ùòÅùòÑùóºùóøùó∏ üëë', url='https://t.me/VenomStoneNetwork')
                            ],
                            [
                            InlineKeyboardButton('ùóîùó±ùó∫ùó∂ùóª üëÆ', url='https://t.me/VenomMoviesbot')
                            ]]
                        reply_markup = InlineKeyboardMarkup(buttons)
                        await message.reply_photo(photo=START_IMG, caption=script.START_TXT.format(message.from_user.mention, get_status(), message.from_user.id),
                            reply_markup=reply_markup,
                            parse_mode=enums.ParseMode.HTML)
                try: 
                    if newPoint == 0:
                        await client.send_message(refUserId , script.REF_PREMEUM.format(message.from_user.mention() , PREMIUM_POINT))
                    else: 
                        await client.send_message(refUserId , script.REF_START.format(message.from_user.mention() , newPoint))
                except : pass
        except Exception as e:
            traceback.print_exc()
            pass
    if len(message.command) != 2:
        buttons = [[
            InlineKeyboardButton('‚ûï ùóîùó±ùó± ùóßùóµùó≤ ùóïùóºùòÅ ùóßùóº ùó¨ùóºùòÇùóø ùóöùóøùóºùòÇùóΩ! ‚ûï', url=f'http://t.me/{temp.U_NAME}?startgroup=start')
        ],[
            InlineKeyboardButton('‚öúÔ∏è ùó†ùóºùòÉùó∂ùó≤ ùóöùóøùóºùòÇùóΩ ‚öúÔ∏è', url='https://t.me/VenomStoneMoviesGroup')
        ],
        [
            InlineKeyboardButton('üîç ùóïùóºùòÅùòÄ', url='https://t.me/VenomStoneBots'),
            InlineKeyboardButton('ùó†ùóºùó±ùòÄ üîé', url='https://t.me/VenomStoneMods')
        ],
        [
            InlineKeyboardButton('üëë ùó©ùó≤ùóªùóºùó∫ ùó¶ùòÅùóºùóªùó≤ ùó°ùó≤ùòÅùòÑùóºùóøùó∏ üëë', url='https://t.me/VenomStoneNetwork')
        ],
        [
            InlineKeyboardButton('ùóîùó±ùó∫ùó∂ùóª üëÆ', url='https://t.me/VenomMoviesbot')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply_photo(photo=START_IMG, caption=script.START_TXT.format(message.from_user.mention, get_status(), message.from_user.id),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return
    if AUTH_CHANNEL and not await is_req_subscribed(client, message):
        try:
            invite_link = await client.create_chat_invite_link(int(AUTH_CHANNEL), creates_join_request=True)
        except ChatAdminRequired:
            logger.error("Make Sure Bot Is Admin In Forcesub Channel")
            return
        btn = [[
            InlineKeyboardButton("üéóÔ∏è ·¥ä·¥è…™…¥ …¥·¥è·¥° üéóÔ∏è", url=invite_link.invite_link)
        ]]

        if message.command[1] != "subscribe":
            try:
                kk, grp_id, file_id = message.command[1].split('_', 2)
                pre = 'checksubp' if kk == 'filep' else 'checksub'
                btn.append(
                    [InlineKeyboardButton("‚ôªÔ∏è ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ‚ôªÔ∏è", callback_data=f"checksub#{file_id}")]
                )
            except (IndexError, ValueError):
                btn.append(
                    [InlineKeyboardButton("‚ôªÔ∏è ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ‚ôªÔ∏è", url=f"https://t.me/{temp.U_NAME}?start={message.command[1]}")]
                )
        await client.send_message(
            chat_id=message.from_user.id,
            text="üôÅ “ì…™ ÄÍú±·¥õ ·¥ä·¥è…™…¥ ·¥è·¥ú Ä  ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ ú·¥á…¥  è·¥è·¥ú ·¥°…™ ü ü …¢·¥á·¥õ ·¥ç·¥è·¥†…™·¥á, ·¥è·¥õ ú·¥á Ä·¥°…™Íú±·¥á  è·¥è·¥ú ·¥°…™ ü ü …¥·¥è·¥õ …¢·¥á·¥õ …™·¥õ.\n\n·¥Ñ ü…™·¥Ñ·¥ã ·¥ä·¥è…™…¥ …¥·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥ üëá",
            reply_markup=InlineKeyboardMarkup(btn),
            parse_mode=enums.ParseMode.HTML
        )
        return

    if len(message.command) == 2 and message.command[1] in ["subscribe", "error", "okay", "help"]:
        buttons = [[
            InlineKeyboardButton('‚ûï ùóîùó±ùó± ùóßùóµùó≤ ùóïùóºùòÅ ùóßùóº ùó¨ùóºùòÇùóø ùóöùóøùóºùòÇùóΩ! ‚ûï', url=f'http://t.me/{temp.U_NAME}?startgroup=start')
        ],[
            InlineKeyboardButton('‚öúÔ∏è ùó†ùóºùòÉùó∂ùó≤ ùóöùóøùóºùòÇùóΩ ‚öúÔ∏è', url='https://t.me/VenomStoneMoviesGroup')
        ],
        [
            InlineKeyboardButton('üîç ùóïùóºùòÅùòÄ', url='https://t.me/VenomStoneBots'),
            InlineKeyboardButton('ùó†ùóºùó±ùòÄ üîé', url='https://t.me/VenomStoneMods')
        ],
        [
            InlineKeyboardButton('üëë ùó©ùó≤ùóªùóºùó∫ ùó¶ùòÅùóºùóªùó≤ ùó°ùó≤ùòÅùòÑùóºùóøùó∏ üëë', url='https://t.me/VenomStoneNetwork')
        ],
        [
            InlineKeyboardButton('ùóîùó±ùó∫ùó∂ùóª üëÆ', url='https://t.me/VenomMoviesbot')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        return await message.reply_photo(photo=START_IMG, caption=script.START_TXT.format(message.from_user.mention, get_status(), message.from_user.id),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    data = message.command[1]
    try:
        pre, grp_id, file_id = data.split('_', 2)
    except:
        pre, grp_id, file_id = "", 0, data
             
    user_id = m.from_user.id
    if not await db.has_premium_access(user_id):
        grp_id = int(grp_id)
        user_verified = await db.is_user_verified(user_id)
        settings = await get_settings(grp_id)
        is_second_shortener = await db.use_second_shortener(user_id, settings.get('verify_time', TWO_VERIFY_GAP)) 
        is_third_shortener = await db.use_third_shortener(user_id, settings.get('third_verify_time', THREE_VERIFY_GAP))
        if settings.get("is_verify", IS_VERIFY) and not user_verified or is_second_shortener or is_third_shortener:
            verify_id = ''.join(random.choices(string.ascii_uppercase + string.digits, k=7))
            await db.create_verify_id(user_id, verify_id)
            temp.CHAT[user_id] = grp_id
            verify = await get_shortlink(f"https://telegram.me/{temp.U_NAME}?start=notcopy_{user_id}_{verify_id}_{file_id}", grp_id, is_second_shortener, is_third_shortener)
            buttons = [[
                InlineKeyboardButton(text="‚ôªÔ∏è ·¥†·¥á Ä…™“ì è ‚ôªÔ∏è", url=verify)
            ],[
                InlineKeyboardButton(text="‚ÅâÔ∏è  ú·¥è·¥° ·¥õ·¥è ·¥†·¥á Ä…™“ì è ‚ùì", url=settings['tutorial']),
            ]]
            reply_markup=InlineKeyboardMarkup(buttons)
            if await db.user_verified(user_id): 
                msg = script.THIRDT_VERIFICATION_TEXT
            else:            
                msg = script.SECOND_VERIFICATION_TEXT if is_second_shortener else script.VERIFICATION_TEXT
            d = await m.reply_text(
                text=msg.format(message.from_user.mention, get_status()),
                protect_content = False,
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )
            await asyncio.sleep(300) 
            await d.delete()
            await m.delete()
            return
            
    if data and data.startswith("allfiles"):
        _, key = data.split("_", 1)
        files = temp.FILES_ID.get(key)
        if not files:
            await message.reply_text("<b>‚ö†Ô∏è ·¥Ä ü ü Íú∞…™ ü·¥ás …¥·¥è·¥õ Íú∞·¥è·¥ú…¥·¥Ö ‚ö†Ô∏è</b>")
            return
        for file in files:
            user_id= message.from_user.id 
            grp_id = temp.CHAT.get(user_id)
            settings = await get_settings(int(grp_id))
            CAPTION = settings['caption']
            f_caption = CAPTION.format(
                file_name = file.file_name,
                file_size = get_size(file.file_size),
                file_caption=file.caption
            )
            btn=[[
                InlineKeyboardButton("‚úõ ·¥°·¥Ä·¥õ·¥Ñ ú & ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚úõ", callback_data=f'stream#{file.file_id}')
            ]]
            await client.send_cached_media(
                chat_id=message.from_user.id,
                file_id=file.file_id,
                caption=f_caption,
                protect_content=settings['file_secure'],
                reply_markup=InlineKeyboardMarkup(btn)
            )
        return

    files_ = await get_file_details(file_id)           
    if not files_:
        pre, file_id = ((base64.urlsafe_b64decode(data + "=" * (-len(data) % 4))).decode("ascii")).split("_", 1)
        return await message.reply('<b>‚ö†Ô∏è ·¥Ä ü ü Íú∞…™ ü·¥ás …¥·¥è·¥õ Íú∞·¥è·¥ú…¥·¥Ö ‚ö†Ô∏è</b>')
    files = files_[0]
    settings = await get_settings(int(grp_id))
    CAPTION = settings['caption']
    f_caption = CAPTION.format(
        file_name = files.file_name,
        file_size = get_size(files.file_size),
        file_caption=files.caption
    )
    btn = [[
        InlineKeyboardButton("‚úõ ·¥°·¥Ä·¥õ·¥Ñ ú & ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚úõ", callback_data=f'stream#{file_id}')
    ]]
    d=await client.send_cached_media(
        chat_id=message.from_user.id,
        file_id=file_id,
        caption=f_caption,
        protect_content=settings['file_secure'],
        reply_markup=InlineKeyboardMarkup(btn)
    )
    await asyncio.sleep(600)
    await d.delete()
    await message.reply_text("<b>‚ö†Ô∏è  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥ç·¥è·¥†…™·¥á Íú∞…™ ü·¥á …™s ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö, ·¥õ·¥è ·¥Ä·¥†·¥è…™·¥Ö ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ …™…¥  ô·¥è·¥õ, …™Íú∞  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥Ä…¢·¥Ä…™…¥ ·¥õ ú·¥á…¥ s·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥ ‚ò∫Ô∏è</b>")         

@Client.on_message(filters.command('delete'))
async def delete(bot, message):
    if message.from_user.id not in ADMINS:
        await message.reply('·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö... üòë')
        return
    """Delete file from database"""
    reply = message.reply_to_message
    if reply and reply.media:
        msg = await message.reply("·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢...‚è≥", quote=True)
    else:
        await message.reply('Reply to file with /delete which you want to delete', quote=True)
        return
    for file_type in ("document", "video", "audio"):
        media = getattr(reply, file_type, None)
        if media is not None:
            break
    else:
        await msg.edit('<b>·¥õ ú…™s …™s …¥·¥è·¥õ s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö Íú∞…™ ü·¥á Íú∞·¥è Ä·¥ç·¥Ä·¥õ</b>')
        return
    
    file_id, file_ref = unpack_new_file_id(media.file_id)
    result = await Media.collection.delete_one({
        '_id': file_id,
    })
    if result.deleted_count:
        await msg.edit('<b>Íú∞…™ ü·¥á …™s s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö Íú∞ Ä·¥è·¥ç ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á üí•</b>')
    else:
        file_name = re.sub(r"(_|\-|\.|\+)", " ", str(media.file_name))
        result = await Media.collection.delete_many({
            'file_name': file_name,
            'file_size': media.file_size,
            'mime_type': media.mime_type
            })
        if result.deleted_count:
            await msg.edit('<b>Íú∞…™ ü·¥á …™s s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö Íú∞ Ä·¥è·¥ç ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á üí•</b>')
        else:
            result = await Media.collection.delete_many({
                'file_name': media.file_name,
                'file_size': media.file_size,
                'mime_type': media.mime_type
            })
            if result.deleted_count:
                await msg.edit('<b>Íú∞…™ ü·¥á …™s s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö Íú∞ Ä·¥è·¥ç ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á üí•</b>')
            else:
                await msg.edit('<b>Íú∞…™ ü·¥á …¥·¥è·¥õ Íú∞·¥è·¥ú…¥·¥Ö …™…¥ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á</b>')

@Client.on_message(filters.command('deleteall'))
async def delete_all_index(bot, message):
    files = await Media.count_documents()
    if int(files) == 0:
        return await message.reply_text('Not have files to delete')
    btn = [[
            InlineKeyboardButton(text=" è·¥ás", callback_data="all_files_delete")
        ],[
            InlineKeyboardButton(text="·¥Ñ·¥Ä…¥·¥Ñ·¥á ü", callback_data="close_data")
        ]]
    if message.from_user.id not in ADMINS:
        await message.reply('·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö... üòë')
        return
    await message.reply_text('<b>·¥õ ú…™s ·¥°…™ ü ü ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä ü ü …™…¥·¥Ö·¥áx·¥á·¥Ö Íú∞…™ ü·¥ás.\n·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á??</b>', reply_markup=InlineKeyboardMarkup(btn))

@Client.on_message(filters.command('settings'))
async def settings(client, message):
    user_id = message.from_user.id if message.from_user else None
    if not user_id:
        return await message.reply("<b>üíî  è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö...</b>")
    chat_type = message.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply_text("<code>·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò.</code>")
    grp_id = message.chat.id
    if not await is_check_admin(client, grp_id, message.from_user.id):
        return await message.reply_text('<b> è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò</b>')
    settings = await get_settings(grp_id)
    title = message.chat.title
    if settings is not None:
            buttons = [[
                InlineKeyboardButton('·¥Ä·¥ú·¥õ·¥è Íú∞…™ ü·¥õ·¥á Ä', callback_data=f'setgs#auto_filter#{settings["auto_filter"]}#{grp_id}'),
                InlineKeyboardButton('·¥è…¥ ‚úì' if settings["auto_filter"] else '·¥è“ì“ì ‚úó', callback_data=f'setgs#auto_filter#{settings["auto_filter"]}#{grp_id}')
            ],[
                InlineKeyboardButton('Íú∞…™ ü·¥á s·¥á·¥Ñ·¥ú Ä·¥á', callback_data=f'setgs#file_secure#{settings["file_secure"]}#{grp_id}'),
                InlineKeyboardButton('·¥è…¥ ‚úì' if settings["file_secure"] else '·¥è“ì“ì ‚úó', callback_data=f'setgs#file_secure#{settings["file_secure"]}#{grp_id}')
            ],[
                InlineKeyboardButton('…™·¥ç·¥Ö ô', callback_data=f'setgs#imdb#{settings["imdb"]}#{grp_id}'),
                InlineKeyboardButton('·¥è…¥ ‚úì' if settings["imdb"] else '·¥è“ì“ì ‚úó', callback_data=f'setgs#imdb#{settings["imdb"]}#{grp_id}')
            ],[
                InlineKeyboardButton('s·¥ò·¥á ü ü ·¥Ñ ú·¥á·¥Ñ·¥ã', callback_data=f'setgs#spell_check#{settings["spell_check"]}#{grp_id}'),
                InlineKeyboardButton('·¥è…¥ ‚úì' if settings["spell_check"] else '·¥è“ì“ì ‚úó', callback_data=f'setgs#spell_check#{settings["spell_check"]}#{grp_id}')
            ],[
                InlineKeyboardButton('·¥Ä·¥ú·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á', callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{grp_id}'),
                InlineKeyboardButton(f'{get_readable_time(DELETE_TIME)}' if settings["auto_delete"] else '·¥è“ì“ì ‚úó', callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{grp_id}')
            ],[
                InlineKeyboardButton(' Ä·¥ás·¥ú ü·¥õ ·¥ç·¥è·¥Ö·¥á', callback_data=f'setgs#link#{settings["link"]}#{str(grp_id)}'),
                InlineKeyboardButton('‚õì  ü…™…¥·¥ã' if settings["link"] else 'üß≤  ô·¥ú·¥õ·¥õ·¥è…¥', callback_data=f'setgs#link#{settings["link"]}#{str(grp_id)}')
            ],[
                InlineKeyboardButton('·¥†·¥á Ä…™“ì è', callback_data=f'setgs#is_verify#{settings["is_verify"]}#{grp_id}'),
                InlineKeyboardButton('·¥è…¥ ‚úì' if settings["is_verify"] else '·¥è“ì“ì ‚úó', callback_data=f'setgs#is_verify#{settings["is_verify"]}#{grp_id}')
            ],[
                InlineKeyboardButton('‚ùå ·¥Ñ ü·¥ès·¥á ‚ùå', callback_data='close_data')
            ]]
            await message.reply_text(
                text=f"·¥Ñ ú·¥Ä…¥…¢·¥á  è·¥è·¥ú Ä s·¥á·¥õ·¥õ…™…¥…¢s Íú∞·¥è Ä <b>'{title}'</b> ·¥Äs  è·¥è·¥ú Ä ·¥°…™s ú ‚ú®",
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=enums.ParseMode.HTML
            )
    else:
        await message.reply_text('<b>Íú±·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢</b>')

@Client.on_message(filters.command('set_template'))
async def save_template(client, message):
    chat_type = message.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply_text("<b>·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò...</b>")
    grp_id = message.chat.id
    title = message.chat.title
    if not await is_check_admin(client, grp_id, message.from_user.id):
        return await message.reply_text('<b> è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò</b>')
    try:
        template = message.text.split(" ", 1)[1]
    except:
        return await message.reply_text("Command Incomplete!")    
    await save_group_settings(grp_id, 'template', template)
    await message.reply_text(f"Successfully changed template for {title} to\n\n{template}", disable_web_page_preview=True)
    
@Client.on_message(filters.command("send"))
async def send_msg(bot, message):
    if message.from_user.id not in ADMINS:
        await message.reply('<b>·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö...</b>')
        return
    if message.reply_to_message:
        target_ids = message.text.split(" ")[1:]
        if not target_ids:
            await message.reply_text("<b>·¥ò ü·¥á·¥ÄÍú±·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥è…¥·¥á ·¥è Ä ·¥ç·¥è Ä·¥á ·¥úÍú±·¥á Ä …™·¥ÖÍú± ·¥ÄÍú± ·¥Ä Íú±·¥ò·¥Ä·¥Ñ·¥á...</b>")
            return
        out = "\n\n"
        success_count = 0
        try:
            users = await db.get_all_users()
            for target_id in target_ids:
                try:
                    user = await bot.get_users(target_id)
                    out += f"{user.id}\n"
                    await message.reply_to_message.copy(int(user.id))
                    success_count += 1
                except Exception as e:
                    out += f"‚ÄºÔ∏è ·¥á Ä Ä·¥è Ä …™…¥ ·¥õ ú…™Íú± …™·¥Ö - <code>{target_id}</code> <code>{str(e)}</code>\n"
            await message.reply_text(f"<b>‚úÖÔ∏è Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á Íú±·¥á…¥·¥õ …™…¥ `{success_count}` …™·¥Ö\n<code>{out}</code></b>")
        except Exception as e:
            await message.reply_text(f"<b>‚ÄºÔ∏è ·¥á Ä Ä·¥è Ä - <code>{e}</code></b>")
    else:
        await message.reply_text("<b>·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥ÄÍú± ·¥Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ è ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á, Íú∞·¥è Ä ·¥á…¢ - <code>/send userid1 userid2</code></b>")

@Client.on_message(filters.regex("#request"))
async def send_request(bot, message):
    try:
        request = message.text.split(" ", 1)[1]
    except:
        await message.reply_text("<b>‚ÄºÔ∏è  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ …™s …™…¥·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á</b>")
        return
    buttons = [[
        InlineKeyboardButton('üëÄ ·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥áÍú±·¥õ üëÄ', url=f"{message.link}")
    ],[
        InlineKeyboardButton('‚öô s ú·¥è·¥° ·¥è·¥ò·¥õ…™·¥è…¥ ‚öô', callback_data=f'show_options#{message.from_user.id}#{message.id}')
    ]]
    sent_request = await bot.send_message(REQUEST_CHANNEL, script.REQUEST_TXT.format(message.from_user.mention, message.from_user.id, request), reply_markup=InlineKeyboardMarkup(buttons))
    btn = [[
         InlineKeyboardButton('‚ú® ·¥†…™·¥á·¥°  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥áÍú±·¥õ ‚ú®', url=f"{sent_request.link}")
    ]]
    await message.reply_text("<b>‚úÖ s·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±“ì·¥ú ü ü è  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥áÍú±·¥õ  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö, ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ Íú±·¥è·¥ç·¥á·¥õ…™·¥ç·¥á...</b>", reply_markup=InlineKeyboardMarkup(btn))

@Client.on_message(filters.command("search"))
async def search_files(bot, message):
    if message.from_user.id not in ADMINS:
        await message.reply('Only the bot owner can use this command... üòë')
        return
    chat_type = message.chat.type
    if chat_type != enums.ChatType.PRIVATE:
        return await message.reply_text(f"<b>Hey {message.from_user.mention}, this command won't work in groups. It only works in my PM!</b>")  
    try:
        keyword = message.text.split(" ", 1)[1]
    except IndexError:
        return await message.reply_text(f"<b>Hey {message.from_user.mention}, give me a keyword along with the command to delete files.</b>")
    files, total = await get_bad_files(keyword)
    if int(total) == 0:
        await message.reply_text('<i>I could not find any files with this keyword üòê</i>')
        return 
    file_names = "\n\n".join(f"{index + 1}. {item['file_name']}" for index, item in enumerate(files))
    file_data = f"üö´ Your search - '{keyword}':\n\n{file_names}"    
    with open("file_names.txt", "w" , encoding='utf-8') as file:
        file.write(file_data)
    await message.reply_document(
        document="file_names.txt",
        caption=f"<b>‚ôªÔ∏è  ô è  è·¥è·¥ú Ä Íú±·¥á·¥Ä Ä·¥Ñ ú, …™ Íú∞·¥è·¥ú…¥·¥Ö - <code>{total}</code> Íú∞…™ ü·¥ás</b>",
        parse_mode=enums.ParseMode.HTML
    )
    os.remove("file_names.txt")

@Client.on_message(filters.command("deletefiles"))
async def deletemultiplefiles(bot, message):
    if message.from_user.id not in ADMINS:
        await message.reply('·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö... üòë')
        return
    chat_type = message.chat.type
    if chat_type != enums.ChatType.PRIVATE:
        return await message.reply_text(f"<b> ú·¥á è {message.from_user.mention}, ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è…¥'·¥õ ·¥°·¥è Ä·¥ã …™…¥ …¢ Ä·¥è·¥ú·¥òs. …™·¥õ ·¥è…¥ ü è ·¥°·¥è Ä·¥ãs ·¥è…¥ ·¥ç è ·¥ò·¥ç !!</b>")
    else:
        pass
    try:
        keyword = message.text.split(" ", 1)[1]
    except:
        return await message.reply_text(f"<b> ú·¥á è {message.from_user.mention}, …¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥ã·¥á è·¥°·¥è Ä·¥Ö ·¥Ä ü·¥è…¥…¢ ·¥°…™·¥õ ú ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á Íú∞…™ ü·¥ás.</b>")
    files, total = await get_bad_files(keyword)
    if int(total) == 0:
        await message.reply_text('<i>…™ ·¥Ñ·¥è·¥ú ü·¥Ö …¥·¥è·¥õ Íú∞…™…¥·¥Ö ·¥Ä…¥ è Íú∞…™ ü·¥ás ·¥°…™·¥õ ú ·¥õ ú…™s ·¥ã·¥á è·¥°·¥è Ä·¥Ö üòê</i>')
        return 
    btn = [[
       InlineKeyboardButton(" è·¥ás, ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á ‚úÖ", callback_data=f"killfilesak#{keyword}")
       ],[
       InlineKeyboardButton("…¥·¥è, ·¥Ä ô·¥è Ä·¥õ ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥ üò¢", callback_data="close_data")
    ]]
    await message.reply_text(
        text=f"<b>·¥õ·¥è·¥õ·¥Ä ü Íú∞…™ ü·¥ás Íú∞·¥è·¥ú…¥·¥Ö - <code>{total}</code>\n\n·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á?\n\n…¥·¥è·¥õ·¥á:- ·¥õ ú…™s ·¥Ñ·¥è·¥ú ü·¥Ö  ô·¥á ·¥Ä ·¥Ö·¥ás·¥õ Ä·¥ú·¥Ñ·¥õ…™·¥†·¥á ·¥Ä·¥Ñ·¥õ…™·¥è…¥!!</b>",
        reply_markup=InlineKeyboardMarkup(btn),
        parse_mode=enums.ParseMode.HTML
    )

@Client.on_message(filters.command("del_file"))
async def delete_files(bot, message):
    if message.from_user.id not in ADMINS:
        await message.reply('Only the bot owner can use this command... üòë')
        return
    chat_type = message.chat.type
    if chat_type != enums.ChatType.PRIVATE:
        return await message.reply_text(f"<b>Hey {message.from_user.mention}, this command won't work in groups. It only works on my PM!</b>")    
    try:
        keywords = message.text.split(" ", 1)[1].split(",")
    except IndexError:
        return await message.reply_text(f"<b>Hey {message.from_user.mention}, give me keywords separated by commas along with the command to delete files.</b>")   
    deleted_files_count = 0
    not_found_files = []
    for keyword in keywords:
        result = await Media.collection.delete_many({'file_name': keyword.strip()})
        if result.deleted_count:
            deleted_files_count += 1
        else:
            not_found_files.append(keyword.strip())
    if deleted_files_count > 0:
        await message.reply_text(f'<b>{deleted_files_count} file successfully deleted from the database üí•</b>')
    if not_found_files:
        await message.reply_text(f'<b>Files not found in the database - <code>{", ".join(not_found_files)}</code></b>')

@Client.on_message(filters.command('set_caption'))
async def save_caption(client, message):
    grp_id = message.chat.id
    title = message.chat.title
    if not await is_check_admin(client, grp_id, message.from_user.id):
        return await message.reply_text('<b> è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò</b>')
    chat_type = message.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply_text("<b>·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò...</b>")
    try:
        caption = message.text.split(" ", 1)[1]
    except:
        return await message.reply_text("Command Incomplete!")
    await save_group_settings(grp_id, 'caption', caption)
    await message.reply_text(f"Successfully changed caption for {title} to\n\n{caption}", disable_web_page_preview=True) 
    
@Client.on_message(filters.command('set_tutorial'))
async def save_tutorial(client, message):
    grp_id = message.chat.id
    title = message.chat.title
    if not await is_check_admin(client, grp_id, message.from_user.id):
        return await message.reply_text('<b> è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò</b>')
    chat_type = message.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply_text("<b>·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò...</b>")
    try:
        tutorial = message.text.split(" ", 1)[1]
    except:
        return await message.reply_text("<b>Command Incomplete!!\n\nuse like this -</b>\n\n<code>/set_caption https://t.me/Aksbackup</code>")    
    await save_group_settings(grp_id, 'tutorial', tutorial)
    await message.reply_text(f"<b>Successfully changed tutorial for {title} to</b>\n\n{tutorial}", disable_web_page_preview=True)
    
@Client.on_message(filters.command('set_shortner'))
async def set_shortner(c, m):
    grp_id = m.chat.id
    title = m.chat.title
    if not await is_check_admin(c, grp_id, m.from_user.id):
        return await m.reply_text('<b> è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò</b>')        
    if len(m.text.split()) == 1:
        await m.reply("<b>Use this command like this - \n\n`/set_shortner tnshort.net 06b24eb6bbb025713cd522fb3f696b6d5de11354`</b>")
        return        
    sts = await m.reply("<b>‚ôªÔ∏è ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢...</b>")
    await asyncio.sleep(1.2)
    await sts.delete()
    chat_type = m.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await m.reply_text("<b>·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò...</b>")
    try:
        URL = m.command[1]
        API = m.command[2]
        resp = requests.get(f'https://{URL}/api?api={API}&url=https://telegram.dog/Aksbackup').json()
        if resp['status'] == 'success':
            SHORT_LINK = resp['shortenedUrl']
        await save_group_settings(grp_id, 'shortner', URL)
        await save_group_settings(grp_id, 'api', API)
        await m.reply_text(f"<b><u>‚úì s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è  è·¥è·¥ú Ä s ú·¥è Ä·¥õ…¥·¥á Ä …™s ·¥Ä·¥Ö·¥Ö·¥á·¥Ö</u>\n\n·¥Ö·¥á·¥ç·¥è - {SHORT_LINK}\n\ns…™·¥õ·¥á - `{URL}`\n\n·¥Ä·¥ò…™ - `{API}`</b>", quote=True)
        user_id = m.from_user.id
        user_info = f"@{m.from_user.username}" if m.from_user.username else f"{m.from_user.mention}"
        link = (await c.get_chat(m.chat.id)).invite_link
        grp_link = f"[{m.chat.title}]({link})"
        log_message = f"#New_Shortner_Set_For_1st_Verify\n\nName - {user_info}\nId - `{user_id}`\n\nDomain name - {URL}\nApi - `{API}`\nGroup link - {grp_link}"
        await c.send_message(LOG_API_CHANNEL, log_message, disable_web_page_preview=True)
    except Exception as e:
        await save_group_settings(grp_id, 'shortner', SHORTENER_WEBSITE)
        await save_group_settings(grp_id, 'api', SHORTENER_API)
        await m.reply_text(f"<b><u>üí¢ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥è·¥ú Ä·¥á·¥Ö!!</u>\n\n·¥Ä·¥ú·¥õ·¥è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ö·¥áÍú∞·¥ú ü·¥õ s ú·¥è Ä·¥õ…¥·¥á Ä\n\n…™Íú∞  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥õ ú·¥á…¥ ·¥ús·¥á ·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ Íú∞·¥è Ä·¥ç·¥Ä·¥õ ·¥è Ä ·¥Ä·¥Ö·¥Ö ·¥†·¥Ä ü…™·¥Ö s ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥Ö·¥è·¥ç·¥Ä…™…¥ …¥·¥Ä·¥ç·¥á & ·¥Ä·¥ò…™\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä üs·¥è ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥è·¥ú Ä <a href=https://t.me/aks_bot_support>s·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò</a> Íú∞·¥è Ä s·¥è ü·¥†·¥á ·¥õ ú…™s …™ss·¥ú·¥á...\n\n ü…™·¥ã·¥á -\n\n`/set_shortner mdiskshortner.link e7beb3c8f756dfa15d0bec495abc65f58c0dfa95`\n\nüíî ·¥á Ä Ä·¥è Ä - <code>{e}</code></b>", quote=True)

@Client.on_message(filters.command('set_shortner_2'))
async def set_shortner_2(c, m):
    grp_id = m.chat.id
    title = m.chat.title
    if not await is_check_admin(c, grp_id, m.from_user.id):
        return await m.reply_text('<b> è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò</b>')
    if len(m.text.split()) == 1:
        await m.reply("<b>Use this command like this - \n\n`/set_shortner_2 tnshort.net 06b24eb6bbb025713cd522fb3f696b6d5de11354`</b>")
        return
    sts = await m.reply("<b>‚ôªÔ∏è ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢...</b>")
    await asyncio.sleep(1.2)
    await sts.delete()
    chat_type = m.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await m.reply_text("<b>·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò...</b>")
    try:
        URL = m.command[1]
        API = m.command[2]
        resp = requests.get(f'https://{URL}/api?api={API}&url=https://telegram.dog/Aksbackup').json()
        if resp['status'] == 'success':
            SHORT_LINK = resp['shortenedUrl']
        await save_group_settings(grp_id, 'shortner_two', URL)
        await save_group_settings(grp_id, 'api_two', API)
        await m.reply_text(f"<b><u>‚úÖ s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è  è·¥è·¥ú Ä s ú·¥è Ä·¥õ…¥·¥á Ä …™s ·¥Ä·¥Ö·¥Ö·¥á·¥Ö</u>\n\n·¥Ö·¥á·¥ç·¥è - {SHORT_LINK}\n\ns…™·¥õ·¥á - `{URL}`\n\n·¥Ä·¥ò…™ - `{API}`</b>", quote=True)
        user_id = m.from_user.id
        user_info = f"@{m.from_user.username}" if m.from_user.username else f"{m.from_user.mention}"
        link = (await c.get_chat(m.chat.id)).invite_link
        grp_link = f"[{m.chat.title}]({link})"
        log_message = f"#New_Shortner_Set_For_2nd_Verify\n\nName - {user_info}\nId - `{user_id}`\n\nDomain name - {URL}\nApi - `{API}`\nGroup link - {grp_link}"
        await c.send_message(LOG_API_CHANNEL, log_message, disable_web_page_preview=True)
    except Exception as e:
        await save_group_settings(grp_id, 'shortner_two', SHORTENER_WEBSITE2)
        await save_group_settings(grp_id, 'api_two', SHORTENER_API2)
        await m.reply_text(f"<b><u>üí¢ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥è·¥ú Ä·¥á·¥Ö!!</u>\n\n·¥Ä·¥ú·¥õ·¥è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ö·¥áÍú∞·¥ú ü·¥õ s ú·¥è Ä·¥õ…¥·¥á Ä\n\n…™Íú∞  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥õ ú·¥á…¥ ·¥ús·¥á ·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ Íú∞·¥è Ä·¥ç·¥Ä·¥õ ·¥è Ä ·¥Ä·¥Ö·¥Ö ·¥†·¥Ä ü…™·¥Ö s ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥Ö·¥è·¥ç·¥Ä…™…¥ …¥·¥Ä·¥ç·¥á & ·¥Ä·¥ò…™\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä üs·¥è ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥è·¥ú Ä <a href=https://t.me/aks_bot_support>s·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò</a> Íú∞·¥è Ä s·¥è ü·¥†·¥á ·¥õ ú…™s …™ss·¥ú·¥á...\n\n ü…™·¥ã·¥á -\n\n`/set_shortner_2 mdiskshortner.link e7beb3c8f756dfa15d0bec495abc65f58c0dfa95`\n\nüíî ·¥á Ä Ä·¥è Ä - <code>{e}</code></b>", quote=True)

@Client.on_message(filters.command('set_log_channel'))
async def set_log(client, message):
    grp_id = message.chat.id
    title = message.chat.title
    if not await is_check_admin(client, grp_id, message.from_user.id):
        return await message.reply_text('<b> è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò</b>')
    if len(message.text.split()) == 1:
        await message.reply("<b>Use this command like this - \n\n`/set_log_channel -100******`</b>")
        return
    sts = await message.reply("<b>‚ôªÔ∏è ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢...</b>")
    await asyncio.sleep(1.2)
    await sts.delete()
    chat_type = message.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply_text("<b>·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò...</b>")
    try:
        log = int(message.text.split(" ", 1)[1])
    except IndexError:
        return await message.reply_text("<b><u>…™…¥·¥†·¥Ä…™ ü·¥Ö Íú∞·¥è Ä·¥ç·¥Ä·¥õ!!</u>\n\n·¥ús·¥á  ü…™·¥ã·¥á ·¥õ ú…™s - `/set_log_channel -100xxxxxxxx`</b>")
    except ValueError:
        return await message.reply_text('<b>·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á …™·¥Ö …™s …™…¥·¥õ·¥á…¢·¥á Ä...</b>')
    try:
        t = await client.send_message(chat_id=log, text="<b> ú·¥á è ·¥° ú·¥Ä·¥õ's ·¥ú·¥ò!!</b>")
        await asyncio.sleep(3)
        await t.delete()
    except Exception as e:
        return await message.reply_text(f'<b><u>üòê ·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á ·¥õ ú…™s  ô·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü...</u>\n\nüíî ·¥á Ä Ä·¥è Ä - <code>{e}</code></b>')
    await save_group_settings(grp_id, 'log', log)
    await message.reply_text(f"<b>‚úÖ s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è s·¥á·¥õ  è·¥è·¥ú Ä  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü Íú∞·¥è Ä {title}\n\n…™·¥Ö - `{log}`</b>", disable_web_page_preview=True)
    user_id = message.from_user.id
    user_info = f"@{message.from_user.username}" if message.from_user.username else f"{message.from_user.mention}"
    link = (await client.get_chat(message.chat.id)).invite_link
    grp_link = f"[{message.chat.title}]({link})"
    log_message = f"#New_Log_Channel_Set\n\nName - {user_info}\nId - `{user_id}`\n\nLog channel id - `{log}`\nGroup link - {grp_link}"
    await client.send_message(LOG_API_CHANNEL, log_message, disable_web_page_preview=True)  

@Client.on_message(filters.command('details'))
async def all_settings(client, message):
    grp_id = message.chat.id
    title = message.chat.title
    if not await is_check_admin(client, grp_id, message.from_user.id):
        return await message.reply_text('<b> è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò</b>')
    chat_type = message.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply_text("<b>·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò...</b>")
    settings = await get_settings(grp_id)
    text = f"""<b><u>‚öôÔ∏è  è·¥è·¥ú Ä s·¥á·¥õ·¥õ…™…¥…¢s Íú∞·¥è Ä -</u> {title}

<u>‚úÖÔ∏è 1s·¥õ ·¥†·¥á Ä…™Íú∞ è s ú·¥è Ä·¥õ…¥·¥á Ä …¥·¥Ä·¥ç·¥á/·¥Ä·¥ò…™</u>
…¥·¥Ä·¥ç·¥á - `{settings["shortner"]}`
·¥Ä·¥ò…™ - `{settings["api"]}`

<u>‚úÖÔ∏è 2…¥·¥Ö ·¥†·¥á Ä…™Íú∞ è s ú·¥è Ä·¥õ…¥·¥á Ä …¥·¥Ä·¥ç·¥á/·¥Ä·¥ò…™</u>
…¥·¥Ä·¥ç·¥á - `{settings["shortner_two"]}`
·¥Ä·¥ò…™ - `{settings["api_two"]}`

<u>‚úÖÔ∏è 3 Ä·¥Ö ·¥†·¥á Ä…™Íú∞ è s ú·¥è Ä·¥õ…¥·¥á Ä …¥·¥Ä·¥ç·¥á/·¥Ä·¥ò…™</u>
…¥·¥Ä·¥ç·¥á - `{settings["shortner_three"]}`
·¥Ä·¥ò…™ - `{settings["api_three"]}`

üìù  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™·¥Ö - `{settings['log']}`

üìç ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã - {settings['tutorial']}

üéØ …™·¥ç·¥Ö ô ·¥õ·¥á·¥ç·¥ò ü·¥Ä·¥õ·¥á - `{settings['template']}`

üìÇ Íú∞…™ ü·¥á ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥ - `{settings['caption']}`</b>"""
    
    btn = [[
        InlineKeyboardButton(" Ä·¥áÍú±·¥á·¥õ ·¥Ö·¥Ä·¥õ·¥Ä", callback_data="reset_grp_data")
    ],[
        InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close_data")
    ]]
    reply_markup=InlineKeyboardMarkup(btn)
    dlt=await message.reply_text(text, reply_markup=reply_markup, disable_web_page_preview=True)
    await asyncio.sleep(300)
    await dlt.delete()

@Client.on_message(filters.command('set_shortner_3'))
async def set_shortner_3(c, m):
    if len(m.text.split()) == 1:
        await m.reply("<b>Use this command like this - \n\n`/set_shortner_3 tnshort.net 06b24eb6bbb025713cd522fb3f696b6d5de11354`</b>")
        return
    sts = await m.reply("<b>‚ôªÔ∏è ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢...</b>")
    await asyncio.sleep(1.2)
    await sts.delete()
    userid = m.from_user.id if m.from_user else None
    if not userid:
        return await m.reply(f"<b>‚ö†Ô∏è  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ ·¥èÍú∞ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò</b>")
    chat_type = m.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        grpid = await active_connection(str(userid))
        if grpid is not None:
            grp_id = grpid
            try:
                chat = await c.get_chat(grpid)
                title = chat.title
            except:
                await m.reply_text("<b>·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á …™ ·¥Ä·¥ç ·¥ò Ä·¥ás·¥á…¥·¥õ …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ü´§...</b>", quote=True)
                return
        else:
            await m.reply_text("<b>‚ÄºÔ∏è …™ ·¥Ä·¥ç …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è …¢ Ä·¥è·¥ú·¥ò...</b>", quote=True)
            return
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grp_id = m.chat.id
        title = m.chat.title
    else:
        return
    st = await c.get_chat_member(grp_id, userid)
    if (
            st.status != enums.ChatMemberStatus.ADMINISTRATOR
            and st.status != enums.ChatMemberStatus.OWNER
            and str(userid) not in ADMINS
    ):
        await m.reply_text("<b>‚ö†Ô∏è  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ ·¥èÍú∞ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò</b>", quote=True)
        return
    if len(m.command) == 1:
        await m.reply_text("<b>·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è ·¥Ä·¥Ö·¥Ö s ú·¥è Ä·¥õ…¥·¥á Ä & ·¥Ä·¥ò…™\n\n·¥áx - `/set_shortner_3 mdiskshortner.link e7beb3c8f756dfa15d0bec495abc65f58c0dfa95`</b>", quote=True)
        return
    try:
        URL = m.command[1]
        API = m.command[2]
        resp = requests.get(f'https://{URL}/api?api={API}&url=https://telegram.dog/Aksbackup').json()
        if resp['status'] == 'success':
            SHORT_LINK = resp['shortenedUrl']
        await save_group_settings(grp_id, 'shortner_three', URL)
        await save_group_settings(grp_id, 'api_three', API)
        await m.reply_text(f"<b><u>‚úÖ s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è  è·¥è·¥ú Ä s ú·¥è Ä·¥õ…¥·¥á Ä …™s ·¥Ä·¥Ö·¥Ö·¥á·¥Ö</u>\n\n·¥Ö·¥á·¥ç·¥è - {SHORT_LINK}\n\ns…™·¥õ·¥á - `{URL}`\n\n·¥Ä·¥ò…™ - `{API}`</b>", quote=True)
        user_id = m.from_user.id
        if m.from_user.username:
            user_info = f"@{m.from_user.username}"
        else:
            user_info = f"{m.from_user.mention}"
        link = (await c.get_chat(m.chat.id)).invite_link
        grp_link = f"[{m.chat.title}]({link})"
        log_message = f"#New_Shortner_Set_For_3rd_Verify\n\nName - {user_info}\nId - `{user_id}`\n\nDomain name - {URL}\nApi - `{API}`\nGroup link - {grp_link}"
        await c.send_message(LOG_API_CHANNEL, log_message, disable_web_page_preview=True)
    except Exception as e:
        await save_group_settings(grp_id, 'shortner_three', SHORTENER_WEBSITE3)
        await save_group_settings(grp_id, 'api_three', SHORTENER_API3)
        await m.reply_text(f"<b><u>üí¢ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥è·¥ú Ä·¥á·¥Ö!!</u>\n\n·¥Ä·¥ú·¥õ·¥è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ö·¥áÍú∞·¥ú ü·¥õ s ú·¥è Ä·¥õ…¥·¥á Ä\n\n…™Íú∞  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥õ ú·¥á…¥ ·¥ús·¥á ·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ Íú∞·¥è Ä·¥ç·¥Ä·¥õ ·¥è Ä ·¥Ä·¥Ö·¥Ö ·¥†·¥Ä ü…™·¥Ö s ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥Ö·¥è·¥ç·¥Ä…™…¥ …¥·¥Ä·¥ç·¥á & ·¥Ä·¥ò…™\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä üs·¥è ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥è·¥ú Ä <a href=https://t.me/aks_bot_support>s·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò</a> Íú∞·¥è Ä s·¥è ü·¥†·¥á ·¥õ ú…™s …™ss·¥ú·¥á...\n\n ü…™·¥ã·¥á -\n\n`/set_shortner_3 mdiskshortner.link e7beb3c8f756dfa15d0bec495abc65f58c0dfa95`\n\nüíî ·¥á Ä Ä·¥è Ä - <code>{e}</code></b>", quote=True)

@Client.on_message(filters.command('set_time_2'))
async def set_time_2(client, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply("<b> è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò...</b>")
    chat_type = message.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply_text("<b>·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò...</b>")       
    grp_id = message.chat.id
    title = message.chat.title
    if not await is_check_admin(client, grp_id, message.from_user.id):
        return await message.reply_text('<b> è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò</b>')
    try:
        time = int(message.text.split(" ", 1)[1])
    except:
        return await message.reply_text("Command Incomplete!")   
    await save_group_settings(grp_id, 'verify_time', time)
    await message.reply_text(f"Successfully set 1st verify time for {title}\n\nTime is - <code>{time}</code>")

@Client.on_message(filters.command('set_time_3'))
async def set_time_3(client, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply("<b> è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò...</b>")
    chat_type = message.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply_text("<b>·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò...</b>")       
    grp_id = message.chat.id
    title = message.chat.title
    if not await is_check_admin(client, grp_id, message.from_user.id):
        return await message.reply_text('<b> è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò</b>')
    try:
        time = int(message.text.split(" ", 1)[1])
    except:
        return await message.reply_text("Command Incomplete!")   
    await save_group_settings(grp_id, 'third_verify_time', time)
    await message.reply_text(f"Successfully set 1st verify time for {title}\n\nTime is - <code>{time}</code>")
